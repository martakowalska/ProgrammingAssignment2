install.packages("xlsx")
install.packages("xlsxjars")
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[1]][[3]]
rootNode[[1]][[4]]
rootNode[[1]][[5]]
xmlSApply(rootNode, xmlValue)
/node
xpathApply(rootNode, "//name", xmlValue)
xpathApply(rootNode, "//price", xmlValue)
fileUrl
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathApply(rootNode, "//li[@class='score']", xmlValue)
scores
install.packages("xlsx")
install.packages("rjava")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(rJava)
library(xlsxjars)
library(xlsx)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
?fromJSON
names(jsonData)
?names
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
jsonData$owner$id
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
head(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
head(iris)
install.packages("data.table")
library(data.table)
DT <- data.table(x=rnorm(9), y= rep(c("a", "b", "c"), each=3), z=rnorm(9))
head(DT, 3)
tables()
DT[,list(mean(x), sum(z))]
DT[,w:=z^2]
DT
DT2 <- DT[,y:=2]
DT2 <- DT
DT[,y:=2]
DT[, y:=2]
DT[,m:= {temp <- (x+z); log2(tmp+5)}]
library(data.table)
DT[,m:= {temp <- (x+z); log2(tmp+5)}]
DT[,a:=x>0]
head(DT, 3)
DT[, y:=1]
head(DT, 3)
DT[,m:= {temp <- (x+z); log2(tmp+5)}]
DT[, y:=1+x]
head(DT, 3)
DT[, y:=2]
head(DT, 3)
DT[,a:=x>0]
head(DT, 3)
DT[,b:=mean(x+w), by=a]
head(DT, 3)
DT
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[ ,.N, by=x]
head(DT, 3)
head(DT, 6)
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
setkey(DT,x)
DT['a']
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1,x)
setkey(DT2,x)
merge(DT1, DT2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./data-science/data/2006_housing.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data-science/data/2006_housing.csv", method="curl")
download.file(fileUrl, destfile="./data-science/data/2006_housing.csv")
download.file(fileUrl, destfile="./data-science/data/2006_housing.csv", method="curl")
?download.file
download.file(fileUrl, destfile="./data-science/data/2006_housing.csv", method="curl")
ex1 <- read.csv("./data-science/data/2006_housing.csv", stringsAsFactors = FALSE)
head(ex1, 10)
rows(ex1)
?rows
value <- ex1$VAL
head(value)
?sub
table(value)
library(xlsx)
dir.create("./data-science/data/NGA.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="./data-science/data/2006_housing.csv", method="curl")
?read.xlsx
dat <- read.xslx("./data-science/data/2006_housing.csv", 1, startRow=18, endRow=23, startCol=7, endCol=15, as.data.frame=TRUE)
library(xlsx)
dat <- read.xslx("./data-science/data/2006_housing.csv", 1, startRow=18, endRow=23, startCol=7, endCol=15, as.data.frame=TRUE)
dat <- read.xslx2("./data-science/data/2006_housing.csv", 1, startRow=18, endRow=23, startCol=7, endCol=15, as.data.frame=TRUE)
dat <- read.xlsx("./data-science/data/2006_housing.csv", 1, startRow=18, endRow=23, startCol=7, endCol=15, as.data.frame=TRUE)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
if(!file.exists("./data-science/data/restaurants.xml")){dir.create("./data-science/data/restaurants.xml")}
if(!file.exists("./data-science/data/restaurants.xml")){touch("./data-science/data/restaurants.xml")}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="./data-science/data/restaurants.xml", method="curl")
ex4 <- xmlTreeParse("./data-science/data/restaurants.xml", useInternal=TRUE)
rootNode <- xmlRoot(ex4)
rootNode
rootNode[[1]]
xmlSApply(rootNode, xmlValue)
?xmlSApply
xmlSApply(rootNode, "//zipcode", xmlValue)
rootNode
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
response$row
row$name
xmlValue(zipcode)
xmlValue(ex4$zipcode)
xmlValue(ex4$row$zipcode)
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- [!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[[3]], x[[5]], x[[7]])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vec2 <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <-c[1:10]
my_vector <-c[1:10
my_vector <- 1:10
my_vector(1:10)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, colnames)
colnames(my_data)
colnames(my_data) <- cnames
my_dat
my_data
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download(fileUrl, destfile="./data-science/data/restaurants.xml", method="curl")
download.file(fileUrl, destfile="./data-science/data/restaurants.xml", method="curl")
?dateDownloaded
ex4 <- xmlTreeParse(fileUrl, useInternal = TRUE)
ex4 <- xmlTreeParse("./data-science/data/restaurants.xml", useInternal = TRUE)
rootNode <- xmlRoot(ex4)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
?xpathApply
?xmlTreeParse
ex4 <- xmlTreeParse("./data-science/data/restaurants.xml", useInternalNodes = TRUE)
zip = xpathApply(ex4, "//zipcode", xmlValue)
zip
length(zip)
x <- zip[zip==21231]
x
length(x)
length(zip[zip==21231])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download(fileUrl, destfile="./data-science/data/communities.csv", method="curl")
download.file(fileUrl, destfile="./data-science/data/communities.csv", method="curl")
?fread
DT <- fread("./data-science/data/communities.csv")
head(DT, 5)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(data.table(mean(DT$pwgtp15,by=DT$SEX)))
system.time(data.table(DT[,mean(pwgtp15),by=SEX]))
system.time(data.table(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
x <- mean(DT$pwgtp15,by=DT$SEX)
x
y <- data.table(mean(DT$pwgtp15,by=DT$SEX))
y
?data.table
vignette("datatable-intro")
tables()
?J
?tapply
system.time(replicate(1000, {DT[,mean(pwgtp15),by=SEX]}))
system.time(replicate(1000, {mean(DT$pwgtp15,by=DT$SEX)}))
?fread
?split
?sapply
system.time(replicate(1000, {sapply(split(DT$pwgtp15,DT$SEX),mean)}))
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.1")
pwd
ls
setwd("~/data-science/R/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
y <- makeVector(5)
y
?solve
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
x <- 0
crazy
crazy()
x
x <- 9
x
crazy()
x
crazy2 <- function() {
x <- 3.14
print(x)
{ print(x); x <- 42; print(x) }
print(x)
}
x <- 0
x
crazy2()
crazy3 <- function() {
x <<- 3.14
print(x)
{ print(x); x <- 42; print(x) }
print(x)
}
x <- 0
x
crazy3()
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- c(1, 2, 3)
mean(v)
v2 <- makeVector(v)
v2
str(v2)
cachemean(v2)
cm <- cachemean(v2)
cm
x <- matrix(1:9, 3, 3)
x
y <- solve(x)
solve(x)
?solve
x <- matrix(1:6, 3, 2)
solve(x)
x <- matrix(c(3, 5, 8, 1), 2, 2)
solve(x)
x
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
xinv <- solve(x)
y <- x
y
makeCacheMatrix(y)
yinv <- cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
x <- as.data.frame(x)
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
yinv <- cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
##        inv <- x$getinverse()
inv <- getinverse(x)
if(!is.null(inv)){
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
yinv <- cacheSolve(y)
v <- c(1, 2, 3, 4)
mean(v)
mv <- makeVector(x)
mv
v
c <- crazy()
x
c2 <- crazy2()
x
c3 <- crazy3()
x
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
x <- 3.14
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
c3 = crazy()
c3 <- crazy()
c <-crazy()
c <-crazy2()
c <-crazy3()
c<-crazy(4)
c<-crazy4())
c<-crazy4())
c<-crazy4()
crazy4 <- function() {
x <<- 3.14
print(x)
{ print(x); x <-- 42; print(x);y<<-10; print(y) }
print(x); print(y)
}
c<-crazy4()
crazy4 <- function() {
x <<- 3.14
print(x)
{ print(x); x <-- 42; print(x);y<<-10; print(y) }
print(x); print(y); y<--20;print(y)
}
c<-crazy4()
crazy4 <- function() {
x <<- 3.14
print(x)
{ print(x); x <-- 42; print(x);y<<-10; print(y) }
print(x); print(y); y<<-20;print(y)
}
c<-crazy4()
crazy4 <- function() {
x <<- 3.14
print(x)
{ print(x); x <<- 42; print(x);y<-10; print(y) }
print(x); print(y); y<<-20;print(y)
}
c<-crazy4()
y<-5
x=y
print(x)
y=y
prin(y)
print(y)
x<-y$getmean()
list(a,b,c)
list<-(a,b,c)
list<-("a","b","c")
list<-{"a","b","c"}
x<-y(a=3,b=4)
c<=crazy4()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
print(x)
